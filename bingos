<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Bingo Online Multi-Cartón</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
      @keyframes fall {
        0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
        100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
      }
    </style>
  </head>
  <body class="bg-blue-50">
    <div id="root"></div>
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">

function App() {
  const [currentView, setCurrentView] = React.useState('home');
  const [roomId, setRoomId] = React.useState('');
  const [playerId, setPlayerId] = React.useState('');
  const [database, setDatabase] = React.useState({});
  const [winners, setWinners] = React.useState([]);
  const [showCelebration, setShowCelebration] = React.useState(false);
  const [playerName, setPlayerName] = React.useState('');

  const modes = [
    { value: 'linea', label: 'Línea Horizontal' },
    { value: 'columna', label: 'Columna Vertical' },
    { value: 'diagonal', label: 'Diagonal' },
    { value: 'carton', label: 'Cartón Lleno' },
    { value: 'esquinas', label: 'Cuatro Esquinas' },
    { value: 'cruz', label: 'Cruz/X' },
  ];

  function generateBingoCard(cardId) {
    const columnRanges = {
      'B': [1, 15], 'I': [16, 30], 'N': [31, 45], 'G': [46, 60], 'O': [61, 75]
    };
    const card = [];
    const letters = ['B', 'I', 'N', 'G', 'O'];
    for (let col = 0; col < 5; col++) {
      const [min, max] = columnRanges[letters[col]];
      const availableNumbers = Array.from({length: max - min + 1}, (_, i) => min + i);
      const columnNumbers = [];
      for (let row = 0; row < 5; row++) {
        if (col === 2 && row === 2) {
          columnNumbers.push('FREE');
        } else {
          const idx = Math.floor(Math.random() * availableNumbers.length);
          columnNumbers.push(availableNumbers.splice(idx, 1)[0]);
        }
      }
      card.push(columnNumbers.sort((a, b) => a === 'FREE' ? 0 : b === 'FREE' ? 0 : a - b));
    }
    return { id: cardId, numbers: card };
  }

  function isWinner(card, mode, drawnNumbers) {
    const marked = Array(5).fill().map(() => Array(5).fill(false));
    for (let row = 0; row < 5; row++) {
      for (let col = 0; col < 5; col++) {
        const cellValue = card.numbers[col][row];
        if (cellValue === 'FREE' || drawnNumbers.includes(cellValue)) {
          marked[col][row] = true;
        }
      }
    }
    switch (mode) {
      case 'linea':
        for (let row = 0; row < 5; row++) {
          if (marked.every((col, c) => marked[c][row])) return true;
        }
        break;
      case 'columna':
        for (let col = 0; col < 5; col++) {
          if (marked[col].every(cell => cell)) return true;
        }
        break;
      case 'diagonal':
        if ([0,1,2,3,4].every(i => marked[i][i])) return true;
        if ([0,1,2,3,4].every(i => marked[i][4-i])) return true;
        break;
      case 'esquinas':
        if (marked[0][0] && marked[4][0] && marked[0][4] && marked[4][4]) return true;
        break;
      case 'carton':
        if ([0,1,2,3,4].every(row => [0,1,2,3,4].every(col => marked[col][row]))) return true;
        break;
      case 'cruz':
        if ([0,1,2,3,4].every(col => marked[col][2]) && [0,1,2,3,4].every(row => marked[2][row])) return true;
        break;
      default:
        return false;
    }
    return false;
  }

  function createRoom() {
    const newRoomId = Math.random().toString(36).substring(2, 8).toUpperCase();
    setRoomId(newRoomId);
    setDatabase({
      ...database,
      [newRoomId]: {
        drawnNumbers: [],
        currentNumber: null,
        mode: 'linea',
        players: {},
        gameStarted: false,
        hostId: 'host',
        winners: []
      }
    });
    setCurrentView('host');
  }

  function generatePlayerLink(customPlayerName = '') {
    if (!roomId) return '';
    const playerNameToUse = customPlayerName || `Jugador ${Object.keys(database[roomId].players).length + 1}`;
    const newCardId = Math.random().toString(36).substring(2, 8);
    const card = generateBingoCard(newCardId);
    const existingPlayer = Object.values(database[roomId].players).find(p => p.name === playerNameToUse);
    let updatedPlayer;
    if (existingPlayer) {
      updatedPlayer = {
        ...existingPlayer,
        cards: [...existingPlayer.cards, card]
      };
    } else {
      const newPlayerId = Math.random().toString(36).substring(2, 8);
      updatedPlayer = {
        id: newPlayerId,
        name: playerNameToUse,
        cards: [card],
        joinedAt: new Date().toLocaleTimeString()
      };
    }
    const updatedRoom = {
      ...database[roomId],
      players: {
        ...database[roomId].players,
        [updatedPlayer.id]: updatedPlayer
      }
    };
    setDatabase({
      ...database,
      [roomId]: updatedRoom
    });
    return `${window.location.origin}/#/sala/${roomId}/jugador/${updatedPlayer.id}`;
  }

  function joinAsPlayer(roomIdInput, playerIdInput) {
    if (database[roomIdInput] && database[roomIdInput].players[playerIdInput]) {
      setRoomId(roomIdInput);
      setPlayerId(playerIdInput);
      setCurrentView('player');
      return true;
    }
    return false;
  }

  function drawNumber() {
    if (!database[roomId]) return;
    const room = database[roomId];
    const availableNumbers = Array.from({length: 75}, (_, i) => i + 1)
      .filter(n => !room.drawnNumbers.includes(n));
    if (availableNumbers.length === 0) return;
    const newNumber = availableNumbers[Math.floor(Math.random() * availableNumbers.length)];
    const newDrawnNumbers = [...room.drawnNumbers, newNumber];
    const previousWinners = room.winners || [];
    const winners = [];
    Object.values(room.players || {}).forEach(player => {
      player.cards.forEach(card => {
        if (isWinner(card, room.mode, newDrawnNumbers)) {
          winners.push({ playerId: player.id, playerName: player.name, cardId: card.id });
        }
      });
    });
    const newWinners = winners.filter(w =>
      !previousWinners.some(pw => pw.playerId === w.playerId && pw.cardId === w.cardId)
    );
    const updatedRoom = {
      ...room,
      drawnNumbers: newDrawnNumbers,
      currentNumber: newNumber,
      winners: winners
    };
    setDatabase({
      ...database,
      [roomId]: updatedRoom
    });
    setWinners(winners);
    if (newWinners.length > 0) {
      setShowCelebration(true);
      setTimeout(() => setShowCelebration(false), 5000);
    }
  }

  const currentRoom = database[roomId] || {};
  const currentPlayer = currentRoom.players?.[playerId] || null;
  const currentWinners = currentRoom.winners || [];

  if (currentView === 'home') {
    return (
      <div className="min-h-screen bg-blue-50 flex flex-col items-center justify-center py-8">
        <h1 className="text-4xl font-bold mb-8 text-blue-800">🎯 Bingo Online</h1>
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full">
          <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">¿Qué quieres hacer?</h2>
          <div className="space-y-4">
            <button
              onClick={createRoom}
              className="w-full px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-lg text-lg"
            >
              🎲 Crear Sala (Host)
            </button>
            <div className="border-t pt-4">
              <h3 className="text-lg font-semibold mb-2 text-gray-700">Unirse como Jugador:</h3>
              <input
                type="text"
                placeholder="Código de Sala (ej: ABC123)"
                className="w-full p-2 border rounded mb-2"
                onChange={(e) => setRoomId(e.target.value.toUpperCase())}
              />
              <input
                type="text"
                placeholder="ID de Jugador (ej: xyz789)"
                className="w-full p-2 border rounded mb-2"
                onChange={(e) => setPlayerId(e.target.value)}
              />
              <button
                onClick={() => {
                  if (joinAsPlayer(roomId, playerId)) {
                  } else {
                    alert('Sala o jugador no encontrado');
                  }
                }}
                className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded"
              >
                🎟️ Entrar con mis Cartones
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'host') {
    const playersList = Object.values(currentRoom.players || {});
    const totalCards = playersList.reduce((sum, player) => sum + player.cards.length, 0);
    return (
      <div className="min-h-screen bg-green-50 flex flex-col items-center py-4 px-2 relative">
        {showCelebration && <CelebrationAnimation />}
        <h1 className="text-2xl font-bold mb-2 text-green-800 text-center">🎯 Panel de Host - Sala {roomId}</h1>
        <div className="bg-white p-4 rounded-lg shadow-lg mb-4 w-full max-w-2xl">
          <h2 className="text-lg font-bold mb-2 text-gray-800">🔗 Generar Links de Cartones</h2>
          <div className="mb-2">
            <input
              type="text"
              placeholder="Nombre del jugador (opcional)"
              className="w-full p-2 border rounded mb-2 text-sm"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
            />
          </div>
          <div className="flex flex-col sm:flex-row gap-2 mb-2">
            <button
              onClick={() => {
                const link = generatePlayerLink(playerName);
                navigator.clipboard.writeText(link);
                alert(`Link copiado al portapapeles:\n${link}`);
                setPlayerName('');
              }}
              className="flex-1 px-2 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded text-sm"
            >
              📋 Generar y Copiar Link
            </button>
            <button
              onClick={() => setCurrentView('home')}
              className="flex-1 px-2 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded text-sm"
            >
              ← Volver
            </button>
          </div>
          <div className="mb-2">
            <h3 className="font-semibold mb-1 text-sm">👥 Jugadores: {playersList.length} | 🎟️ Cartones: {totalCards}</h3>
            <div className="max-h-32 overflow-y-auto text-xs">
              {playersList.map(player => (
                <div key={player.id} className="flex justify-between items-center p-1 bg-gray-50 rounded mb-1">
                  <span className="font-medium">{player.name}</span>
                  <span className="text-blue-600">{player.cards.length} cartón{player.cards.length > 1 ? 'es' : ''}</span>
                  <span className="text-gray-400 text-xs">{player.joinedAt}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-lg w-full max-w-2xl mb-4">
          <h2 className="text-lg font-bold mb-2 text-gray-800">🎲 Control de Sorteo</h2>
          <div className="mb-2 flex flex-col sm:flex-row gap-2 items-center">
            <label className="font-semibold text-gray-700 mr-2">Modalidad:</label>
            <select
              className="border rounded px-2 py-1 text-sm"
              value={currentRoom.mode || 'linea'}
              onChange={e => {
                setDatabase({
                  ...database,
                  [roomId]: { ...currentRoom, mode: e.target.value }
                });
              }}
            >
              {modes.map(m => (
                <option key={m.value} value={m.value}>{m.label}</option>
              ))}
            </select>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-green-700 mb-1">
              {currentRoom.currentNumber || '--'}
            </div>
            <div className="text-xs text-gray-600 mb-2">
              Números salidos: {currentRoom.drawnNumbers?.length || 0}/75
            </div>
            <button
              onClick={drawNumber}
              className="w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-bold rounded text-lg"
              disabled={currentRoom.drawnNumbers?.length >= 75}
            >
              Sacar Número
            </button>
          </div>
        </div>
        {currentWinners.length > 0 && (
          <div className="bg-yellow-100 border-l-4 border-yellow-500 p-3 rounded mb-4 w-full max-w-2xl">
            <h3 className="font-bold text-yellow-700 mb-1">🎉 ¡Ganadores!</h3>
            <ul className="text-yellow-800 text-sm">
              {currentWinners.map((w, idx) => (
                <li key={idx}>{w.playerName} - Cartón #{w.cardId}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  }

  if (currentView === 'player' && currentPlayer) {
    const playerWinningCards = currentWinners.filter(w => w.playerId === currentPlayer.id);
    const hasWon = playerWinningCards.length > 0;
    return (
      <div className="min-h-screen bg-blue-50 flex flex-col items-center py-4 px-2 relative">
        {hasWon && showCelebration && <CelebrationAnimation />}
        <h1 className="text-xl font-bold mb-1 text-blue-800 text-center">🎯 Bingo - Sala {roomId}</h1>
        <h2 className="text-base mb-2 text-gray-600 text-center">{currentPlayer.name} - {currentPlayer.cards.length} cartón{currentPlayer.cards.length > 1 ? 'es' : ''}</h2>
        <div className="mb-4 text-center">
          <div className="text-base font-semibold text-gray-700">Número Actual:</div>
          <div className="text-4xl font-bold text-blue-700 my-1">
            {currentRoom.currentNumber || '--'}
          </div>
          <div className="text-xs text-gray-600">
            Números salidos: {currentRoom.drawnNumbers?.length || 0}/75
          </div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-4 w-full max-w-6xl">
          {currentPlayer.cards.map((card, index) => {
            const isWinningCard = playerWinningCards.some(w => w.cardId === card.id);
            return (
              <div key={card.id} className={`${isWinningCard ? 'ring-4 ring-yellow-400 ring-opacity-75' : ''}`}>
                <BingoCard
                  playerName={`Cartón #${index + 1}`}
                  card={card}
                  drawnNumbers={currentRoom.drawnNumbers || []}
                  isWinner={isWinningCard}
                />
              </div>
            );
          })}
        </div>
        {hasWon && (
          <div className="mb-4 bg-yellow-100 border-l-4 border-yellow-500 p-3 rounded w-full max-w-md text-center animate-pulse">
            <span className="font-bold text-yellow-700 text-lg">
              🎉 ¡BINGO! Tienes {playerWinningCards.length} cartón{playerWinningCards.length > 1 ? 'es' : ''} ganador{playerWinningCards.length > 1 ? 'es' : ''}! 🎉
            </span>
          </div>
        )}
        <button
          onClick={() => setCurrentView('home')}
          className="mt-6 px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded w-full max-w-xs"
        >
          ← Salir del Juego
        </button>
      </div>
    );
  }

  return <div>Cargando...</div>;
}

function CelebrationAnimation() {
  const confettiPieces = Array.from({ length: 50 }, (_, i) => i);
  return (
    <div className="fixed inset-0 pointer-events-none z-50 overflow-hidden">
      {confettiPieces.map(i => (
        <div
          key={i}
          className="absolute animate-bounce"
          style={{
            left: `${Math.random() * 100}%`,
            top: `-10px`,
            animationDelay: `${Math.random() * 2}s`,
            animationDuration: `${2 + Math.random() * 3}s`,
            transform: `rotate(${Math.random() * 360}deg)`
          }}
        >
          <div
            className="w-3 h-3 rounded"
            style={{
              backgroundColor: ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#fd79a8', '#fdcb6e'][Math.floor(Math.random() * 7)],
              animation: `fall ${2 + Math.random() * 3}s linear infinite`
            }}
          />
        </div>
      ))}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="bg-yellow-400 text-yellow-900 px-8 py-4 rounded-full shadow-lg animate-pulse text-2xl font-bold">
          🎉 ¡BINGO! 🎉
        </div>
      </div>
    </div>
  );
}

function BingoCard({ playerName, card, drawnNumbers, isWinner = false }) {
  return (
    <div className={`inline-block bg-white rounded-lg shadow-lg p-2 border-2 w-full max-w-xs sm:max-w-sm
      ${isWinner ? 'border-yellow-400 bg-yellow-50' : 'border-blue-400'}
    `}>
      <div className="mb-1 text-center">
        <div className={`font-bold text-sm ${isWinner ? 'text-yellow-700' : 'text-blue-700'}`}>
          {playerName} {isWinner && '🏆'}
        </div>
        <div className="text-xs text-gray-500">ID: {card.id}</div>
      </div>
      <table className="table-fixed w-full border-collapse text-xs">
        <thead>
          <tr>
            {['B', 'I', 'N', 'G', 'O'].map(l => (
              <th key={l} className={`p-1 text-sm ${isWinner ? 'text-yellow-700' : 'text-blue-800'}`}>{l}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {[0,1,2,3,4].map(row => (
            <tr key={row}>
              {[0,1,2,3,4].map(col => {
                const value = card.numbers[col][row];
                const isMarked = value === 'FREE' || drawnNumbers.includes(value);
                return (
                  <td
                    key={col}
                    className={`w-6 h-6 sm:w-8 sm:h-8 text-center align-middle font-bold border text-xs
                      ${isMarked ? 'bg-blue-300 text-white' : 'bg-gray-50 text-blue-900'}
                      ${value === 'FREE' ? 'bg-yellow-200 text-red-600' : ''}
                      ${isWinner && isMarked ? 'bg-yellow-300' : ''}
                    `}
                  >
                    {value === 'FREE' ? 'FREE' : value}
                  </td>
                );
              })}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

ReactDOM.render(<App />, document.getElementById('root'));
    </script>
  </body>
</html>
